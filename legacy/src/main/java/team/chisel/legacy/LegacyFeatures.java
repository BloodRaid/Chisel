package team.chisel.legacy;

import java.util.Arrays;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

import com.tterrag.registrate.providers.RegistrateLangProvider;
import com.tterrag.registrate.providers.loot.RegistrateBlockLootTables;
import com.tterrag.registrate.util.entry.BlockEntry;

import net.minecraft.client.renderer.RenderType;
import net.minecraft.data.recipes.ShapedRecipeBuilder;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.tags.BlockTags;
import net.minecraft.tags.TagKey;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.block.state.properties.WoodType;
import net.minecraft.world.level.material.Material;
import net.minecraft.world.level.material.MaterialColor;
import net.minecraft.world.level.storage.loot.providers.number.ConstantValue;
import net.minecraftforge.common.Tags;
import net.minecraftforge.registries.ForgeRegistries;
import team.chisel.Features;
import team.chisel.api.block.ChiselBlockFactory;
import team.chisel.client.data.ModelTemplates;
import team.chisel.client.data.VariantTemplates;
import team.chisel.common.Reference;
import team.chisel.common.block.BlockCarvable;
import team.chisel.common.block.BlockCarvableBookshelf;
import team.chisel.common.block.BlockCarvablePane;
import team.chisel.common.init.ChiselCompatTags;

public class LegacyFeatures {

	private static final ChiselBlockFactory _FACTORY = ChiselBlockFactory.newFactory(ChiselLegacy.registrate());

    public static final Map<String, BlockEntry<BlockCarvable>> DIRT = _FACTORY.newType(Material.DIRT, "dirt")
            .addBlock(Blocks.DIRT)
            .applyTag(BlockTags.MINEABLE_WITH_SHOVEL)
            .variation("bricks")
            .next("netherbricks").localizedName("Nether Bricks")
            .next("bricks3").localizedName("Small Bricks")
            .next("cobble")
            .next("reinforcedcobbledirt").localizedName("Reinforced Cobble")
            .next("reinforceddirt").localizedName("Reinforced Dirt")
            .next("happy").localizedName("Happy Souls")
            .next("bricks2").localizedName("Disordered Bricks")
            .next("bricks_dirt2").localizedName("Brick-Topped Dirt")
            .next("hor").localizedName("Horizontal Streaks")
                .model(ModelTemplates.cubeColumn("hor-ctmh", "hor-top"))
            .next("vert").localizedName("Vertical Streaks")
            .next("layers")
            .next("vertical") //.localizedName("Vertical Layers") TODO rename with paper
            .next("chunky")
            .next("horizontal")
            .next("plate")
            .build(b -> b.strength(0.5F, 0.0F).sound(SoundType.GRAVEL));

    public static final Map<String, BlockEntry<BlockCarvable>> GLASS = _FACTORY.newType(Material.GLASS, "glass")
            .addBlock(Blocks.GLASS)
            .addTag(Tags.Blocks.GLASS)
            .addTag(Tags.Blocks.GLASS_COLORLESS)
            .initialProperties(() -> Blocks.GLASS)
            .variation("terrain_glassbubble").localizedName("Bubble")
//            .next("chinese")
            .next("japanese")
            .next("terrain_glassdungeon").localizedName("Dungeon")
            .next("terrain_glasslight").localizedName("Light")
            .next("terrain_glassnoborder").localizedName("Gray-Bordered")
            .next("terrain_glass_ornatesteel").localizedName("Ornate Steel")
            .next("terrain_glass_screen").localizedName("Screen")
            .next("terrain_glassshale").localizedName("Shale")
            .next("terrain_glass_steelframe").localizedName("Steel-Framed")
            .next("terrain_glassstone").localizedName("Stone-Framed")
            .next("terrain_glassstreak").localizedName("Streaks")
            .next("terrain_glass_thickgrid").localizedName("Thick Grid")
            .next("terrain_glass_thingrid").localizedName("Thin Grid")
            .next("a1_glasswindow_ironfencemodern").localizedName("Iron Fence")
            .next("chrono").localizedName("Asymmetrical Leaded Glass")
            .next("chinese2")
            .next("japanese2")
            .build(b -> b.sound(SoundType.GLASS).explosionResistance(0.3F));

    public static final Map<String, BlockEntry<BlockCarvablePane>> GLASSPANE = _FACTORY.newType(Material.GLASS, "glasspane", BlockCarvablePane::new)
            .addBlock(Blocks.GLASS_PANE)
            .addTag(Tags.Blocks.GLASS)
            .addTag(Tags.Blocks.GLASS_COLORLESS)
            .initialProperties(() -> Blocks.GLASS)
            .variation("terrain_glassbubble").localizedName("Bubble")
            .model(ModelTemplates.paneBlockCTM("block/glass/edge"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
//            .next("chinese")
//                .model(ModelTemplates.paneblock("block/glass/chinese-top"))
//                .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("japanese")
            .model(ModelTemplates.paneBlock("block/glass/japanese-top"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("terrain_glassdungeon").localizedName("Dungeon")
            .model(ModelTemplates.paneBlock("block/glass/edge_steel"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("terrain_glasslight").localizedName("Light")
            .model(ModelTemplates.paneBlockCTM("block/glass/edge"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("terrain_glassnoborder").localizedName("Gray-Bordered")
            .model(ModelTemplates.paneBlockCTM("block/glass/edge"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("terrain_glass_ornatesteel").localizedName("Ornate Steel")
            .model(ModelTemplates.paneBlockCTM("block/glass/edge_steel"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("terrain_glass_screen").localizedName("Screen")
            .model(ModelTemplates.paneBlock("block/glass/terrain_glass_screen"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("terrain_glassshale").localizedName("Shale")
            .model(ModelTemplates.paneBlockCTM("block/glass/edge_steel"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("terrain_glass_steelframe").localizedName("Steel-Framed")
            .model(ModelTemplates.paneBlockCTM("block/glass/edge_steel"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("terrain_glassstone").localizedName("Stone-Framed")
            .model(ModelTemplates.paneBlockCTM("block/glass/edge_steel"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("terrain_glassstreak").localizedName("Streaks")
            .model(ModelTemplates.paneBlock("block/glass/terrain_glassstreak-top"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("terrain_glass_thickgrid").localizedName("Thick Grid")
            .model(ModelTemplates.paneBlock("block/glass/terrain_glass_thickgrid"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("terrain_glass_thingrid").localizedName("Thin Grid")
            .model(ModelTemplates.paneBlock("block/glass/terrain_glass_thingrid"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("a1_glasswindow_ironfencemodern").localizedName("Iron Fence")
            .model(ModelTemplates.paneBlock("block/glass/edge_steel"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("chrono").localizedName("Asymmetrical Leaded Glass")
            .model(ModelTemplates.paneBlockCTM("block/glass/edge_steel"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("chinese2")
            .model(ModelTemplates.paneBlock("block/glass/chinese2-top"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .next("japanese2")
            .model(ModelTemplates.paneBlock("block/glass/japanese2-top"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
            .build(b -> b.sound(SoundType.GLASS).explosionResistance(0.3F));

    public static Map<DyeColor, Map<String, BlockEntry<BlockCarvable>>> GLASS_STAINED = Arrays.stream(DyeColor.values())
            .collect(Collectors.toMap(Function.identity(), color -> _FACTORY.newType(Material.GLASS, "glass_stained/" + color.getSerializedName())
                    .addBlock(new ResourceLocation(color.getSerializedName() + "_stained_glass"))
                    .setGroupName(RegistrateLangProvider.toEnglishName(color.getSerializedName()) + " Stained Glass")
                    .initialProperties(() -> ForgeRegistries.BLOCKS.getValue(new ResourceLocation(color.getSerializedName() + "_stained_glass")))
                    .addTag(Tags.Blocks.GLASS)
                    .addTag(BlockTags.create(new ResourceLocation("forge", "glass_" + color.getSerializedName())))
                    .variation("panel")
                    .next("framed")
                    .model(ModelTemplates.cubeCTMTranslusent("block/glass_stained/" + color.getSerializedName() + "/framed", "block/glass_stained/" + color.getSerializedName() + "/framed-ctm"))
                    .next("framed_fancy").localizedName("Fancy-Framed")
                    .model(ModelTemplates.cubeCTMTranslusent("block/glass_stained/" + color.getSerializedName() + "/framed", "block/glass_stained/" + color.getSerializedName() + "/framed_fancy-ctm"))
                    .next("streaks")
                    .next("rough")
                    .model(ModelTemplates.cubeCTMTranslusent("block/glass_stained/" + color.getSerializedName() + "/rough", "block/glass_stained/" + color.getSerializedName() + "/rough-ctm"))
                    .next("brick")
                    .model(ModelTemplates.cubeCTMTranslusent("block/glass_stained/" + color.getSerializedName() + "/brick", "block/glass_stained/" + color.getSerializedName() + "/brick-ctm"))
                    .build(b -> b.sound(SoundType.GLASS).explosionResistance(0.3F))
            ));

    public static Map<DyeColor, Map<String, BlockEntry<BlockCarvablePane>>> GLASSPANE_STAINED = Arrays.stream(DyeColor.values())
            .collect(Collectors.toMap(Function.identity(), color -> _FACTORY.newType(Material.GLASS, "glasspane_stained/" + color.getSerializedName(), BlockCarvablePane::new)
                    .addBlock(new ResourceLocation(color.getSerializedName() + "_stained_glasspane"))
                    .setGroupName(RegistrateLangProvider.toEnglishName(color.getSerializedName()) + " Stained Glasspane")
                    .initialProperties(() -> ForgeRegistries.BLOCKS.getValue(new ResourceLocation(color.getSerializedName() + "_stained_glass_pane")))
                    .addTag(Tags.Blocks.GLASS_PANES)
                    .addTag(BlockTags.create(new ResourceLocation("forge", "glass_pane/" + color.getSerializedName())))
                    .variation("panel")
                    .model(ModelTemplates.paneBlock("minecraft:block/" + color.getSerializedName() + "_stained_glass_pane_top"))
                    .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
                    .next("framed")
                    .model(ModelTemplates.paneBlockCTM("minecraft:block/" + color.getSerializedName() + "_stained_glass_pane_top", "block/glass_stained/" + color.getSerializedName() + "/framed", "block/glass_stained/" + color.getSerializedName() + "/framed"))
                    .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
                    .next("framed_fancy").localizedName("Fancy-Framed")
                    .model(ModelTemplates.paneBlockCTM("minecraft:block/" + color.getSerializedName() + "_stained_glass_pane_top", "block/glass_stained/" + color.getSerializedName() + "/framed", "block/glass_stained/" + color.getSerializedName() + "/framed_fancy"))
                    .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/glass_stained/" + color.getSerializedName() + "/framed"))
                    .next("streaks")
                    .model(ModelTemplates.paneBlock("minecraft:block/" + color.getSerializedName() + "_stained_glass_pane_top"))
                    .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
                    .next("rough")
                    .model(ModelTemplates.paneBlockCTM("minecraft:block/" + color.getSerializedName() + "_stained_glass_pane_top", "block/glass_stained/" + color.getSerializedName() + "/rough", "block/glass_stained/" + color.getSerializedName() + "/rough"))
                    .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
                    .next("brick")
                    .model(ModelTemplates.paneBlockCTM("minecraft:block/" + color.getSerializedName() + "_stained_glass_pane_top", "block/glass_stained/" + color.getSerializedName() + "/brick", "block/glass_stained/" + color.getSerializedName() + "/brick"))
                    .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry).replaceFirst("pane", "")))
                    .build(b -> b.sound(SoundType.GLASS).explosionResistance(0.3F))
            ));

    public static final Map<String, BlockEntry<BlockCarvable>> MARBLEPILLAR = _FACTORY.newType(Material.STONE, "marblepillar")
            .setGroup(BlockTags.create(new ResourceLocation("chisel", "marble")))
            .setGroupName("")
            .applyTag(BlockTags.MINEABLE_WITH_PICKAXE)
            .addTag(ChiselCompatTags.STONE_MARBLE)
            .initialProperties(() -> Blocks.STONE)
            .color(MaterialColor.QUARTZ)
            .variations(VariantTemplates.PILLAR)
            .variation("simple").localizedName("Simple Pillar")
                .model(ModelTemplates.cubeAll("-top"))
            .next("rough") //TODO different key?
                .model(ModelTemplates.cubeAll("-top"))
            .next("widedecor").localizedName("Decor-Capped Wide Pillar")
                .model(ModelTemplates.cubeAll("-top"))
            .next("widegreek").localizedName("Greek-Capped Wide Pillar")
                .model(ModelTemplates.cubeAll("-top"))
            .next("wideplain").localizedName("Plain-Capped Wide Pillar")
                .model(ModelTemplates.cubeAll("-top"))
            .next("pillar").localizedName("Large Pillar") //.localizedName("Concaved Pillar") TODO different name with obsidian
                .model(ModelTemplates.cubeAll("-top"))
            .next("default").localizedName("Small-Concaved Pillar")
                .model(ModelTemplates.cubeAll("-top"))
            .build(b -> b.strength(1.75F, 10.0F));


    public static final Map<String, BlockEntry<BlockCarvable>> NETHERBRICK = _FACTORY.newType(Material.STONE, "netherbrick")
            .addBlock(Blocks.NETHER_BRICKS)
            .applyTag(BlockTags.MINEABLE_WITH_PICKAXE)
            .initialProperties(() -> Blocks.NETHER_BRICKS)
            .variation("a1_netherbrick_brinstar").localizedName("Blue")
            .next("a1_netherbrick_classicspatter").localizedName("Blood-Spattered")
            .next("a1_netherbrick_guts").localizedName("Meat Bricks")
            .next("a1_netherbrick_gutsdark").localizedName("Dark Meat Bricks")
            .next("a1_netherbrick_gutssmall").localizedName("Small Meat Bricks")
            .next("a1_netherbrick_lavabrinstar").localizedName("Blue Lava Brick")
            .next("a1_netherbrick_lavabrown").localizedName("Brown Lava Brick")
            .next("a1_netherbrick_lavaobsidian").localizedName("Dark Lava Brick")
            .next("a1_netherbrick_lavastonedark").localizedName("Stone Lava Brick")
            .next("a1_netherbrick_meat").localizedName("Nether Brick made of Meat")
            .next("a1_netherbrick_meatred").localizedName("Red Nether Brick made of Meat")
            .next("a1_netherbrick_meatredsmall").localizedName("Small Nether Brick made of Meat")
            .next("a1_netherbrick_meatsmall").localizedName("Small Red Nether Brick made of Meat")
            .next("a1_netherbrick_red").localizedName("Red Nether Brick")
            .next("a1_netherbrick_redsmall").localizedName("Small Red Nether Brick")
            .next("netherfancybricks").localizedName("Disordered Nether Bricks")
            .build();

    public static final Map<String, BlockEntry<BlockCarvable>> NETHERRACK = _FACTORY.newType(Material.STONE, "netherrack")
            .addBlock(Blocks.NETHERRACK)
            .applyTag(BlockTags.MINEABLE_WITH_PICKAXE)
            .initialProperties(() -> Blocks.NETHERRACK)
            .variation("a1_netherrack_bloodgravel").localizedName("Streaked")
            .next("a1_netherrack_bloodrock").localizedName("Red Rock")
            .next("a1_netherrack_bloodrockgrey").localizedName("Gray Rock")
            .next("a1_netherrack_brinstar").localizedName("Blue Streaked")
            .next("a1_netherrack_brinstarshale").localizedName("Blue Shale")
            .next("a1_netherrack_classic").localizedName("Rocky")
            .next("a1_netherrack_classicspatter").localizedName("Blood-Splatted Rocky")
            .next("a1_netherrack_guts").localizedName("Raw Guts")
            .next("a1_netherrack_gutsdark").localizedName("Guts")
            .next("a1_netherrack_meat")
            .next("a1_netherrack_meatred").localizedName("Raw Meat")
            .next("a1_netherrack_meatrock").localizedName("Bloody Rock")
            .next("a1_netherrack_red").localizedName("Dark Red")
            .next("a1_netherrack_wells").localizedName("Bloody Blue")
            .build();


    public static final Map<String, BlockEntry<BlockCarvablePane>> IRONPANE = _FACTORY.newType(Material.GLASS, "ironpane", BlockCarvablePane::new)
            .setGroupName("Iron Bars")
            .addBlock(Blocks.IRON_BARS)
            .initialProperties(() -> Blocks.IRON_BARS)
            .applyTag(BlockTags.MINEABLE_WITH_PICKAXE)
            .applyTag(BlockTags.NEEDS_IRON_TOOL)
            .variation("borderless").localizedName("FrameLess")
            .model(ModelTemplates.bars("minecraft:block/iron_bars", "block/ironpane/borderless-top", "block/ironpane/borderless-side"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry)))
            .next("borderless-topper").localizedName("Frameless Topper")
            .model(ModelTemplates.bars("block/ironpane/borderless-topper", "block/ironpane/borderless-topper-top", "block/ironpane/borderless-topper-side"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry)))
            .next("barbedwire").localizedName("Barbed Wire")
            .model(ModelTemplates.bars("block/ironpane/barbedwire", "block/ironpane/barbedwire-top", "block/ironpane/barbedwire-side"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry)))
            .next("cage").localizedName("Thick Cage")
            .model(ModelTemplates.bars("block/ironpane/cage", "block/ironpane/cage-top", "block/ironpane/cage-top"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry)))
            .next("thickgrid").localizedName("Thick Grid")
            .model(ModelTemplates.bars())
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry)))
            .next("thingrid").localizedName("Thin Grid")
            .model(ModelTemplates.bars("block/ironpane/thingrid", "block/ironpane/thingrid-top", "block/ironpane/thingrid-top"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry)))
            .next("ornatesteel").localizedName("Ornate")
            .model(ModelTemplates.bars("block/ironpane/ornatesteel", "block/ironpane/ornatesteel-top", "block/ironpane/ornatesteel-top"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry)))
            .next("bars").localizedName("Straight")
            .model(ModelTemplates.bars("block/ironpane/bars", "block/ironpane/bars-top", "block/ironpane/bars-side"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry)))
            .next("spikes")
            .model(ModelTemplates.bars("block/ironpane/spikes", "block/ironpane/spikes-top", "block/ironpane/spikes-side"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry)))
            .next("classic")
            .model(ModelTemplates.bars("block/ironpane/classic", "block/ironpane/classic", "block/ironpane/classic"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry)))
            .next("classicnew").localizedName("Classic Thin")
            .model(ModelTemplates.bars("block/ironpane/classicnew", "block/ironpane/classic", "block/ironpane/classic"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry)))
            .next("fence")
            .model(ModelTemplates.bars("block/ironpane/fence", "block/ironpane/bars-top", "block/ironpane/bars-top"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry)))
            .next("modern").localizedName("Modern Fence")
            .model(ModelTemplates.bars("block/ironpane/modern", "block/ironpane/modern-top", "block/ironpane/modern-top"))
            .itemModel((ctx, prov) -> prov.withExistingParent("item/" + prov.name(ctx::getEntry), new ResourceLocation("item/generated")).texture("layer0", "block/" + prov.name(ctx::getEntry)))
            .build();

    public static final Map<String, BlockEntry<BlockCarvable>> OBSIDIAN = _FACTORY.newType(Material.STONE, "obsidian")
            .addTag(Tags.Blocks.OBSIDIAN)
            .applyTag(BlockTags.DRAGON_IMMUNE)
            .applyTag(BlockTags.MINEABLE_WITH_PICKAXE)
            .applyTag(BlockTags.NEEDS_DIAMOND_TOOL)
            .variation("pillar").localizedName("Large Pillar")
                .model(ModelTemplates.cubeColumn())
            .next("pillar-quartz").localizedName("Pillar")
                .model(ModelTemplates.cubeColumn())
            .next("chiseled")
                .model(ModelTemplates.cubeColumn())
            .next("panel_shiny").localizedName("Shiny Panel")
            .next("panel")
            .next("chunks")
            .next("growth").localizedName("Organic Chunks")
            .next("crystal").localizedName("Shiny")
            .next("map-a").localizedName("Map (Eastern)")
            .next("map-b").localizedName("Map (Western)")
            .next("panel_light").localizedName("Light Panel")
            .next("blocks").localizedName("Medium Tiles")
            .next("tiles") //.localizedName("Small Tiles") TODO name conflict
            .next("greek")
                .model(ModelTemplates.cubeColumn())
            .next("crate")
                .model(ModelTemplates.cubeBottomTop())
            .build(b -> b.strength(50.0F, 2000.0F).sound(SoundType.STONE));

    public static final Map<String, BlockEntry<BlockCarvable>> PAPER = _FACTORY.newType(Material.PLANT, "paper")
            .recipe((prov, block) -> new ShapedRecipeBuilder(block, 32)
                    .pattern("ppp").pattern("psp").pattern("ppp")
                    .define('p', Items.PAPER)
                    .define('s', Tags.Items.RODS_WOODEN)
                    .unlockedBy("has_stick", prov.has(Tags.Items.RODS_WOODEN))
                    .save(prov))
            .variation("box")
            .next("throughmiddle").localizedName("Horizontally Striked")
            .next("cross").localizedName("Crossed")
            .next("sixsections").localizedName("Six-Pack")
            .next("vertical")
            .next("horizontal")
            .next("floral")
            .next("plain")
            .next("door")
            .build(b -> b.strength(1.5F, 0.0F).sound(SoundType.GRASS));

    public static final Map<String, BlockEntry<BlockCarvable>> RED_SANDSTONE_SCRIBBLES = _FACTORY.newType(Material.STONE, "sandstonered-scribbles")
            .setGroup(BlockTags.create(new ResourceLocation("chisel", "red_sandstone")))
            .setGroupName("")
            .applyTag(BlockTags.MINEABLE_WITH_PICKAXE)
            .applyTag(Tags.Blocks.SANDSTONE)
            .initialProperties(() -> Blocks.SANDSTONE)
            .color(MaterialColor.COLOR_ORANGE)
            .variations(VariantTemplates.SCRIBBLES)
            .build();

    public static final Map<String, BlockEntry<BlockCarvable>> SANDSTONE_SCRIBBLES = _FACTORY.newType(Material.STONE, "sandstone-scribbles")
            .setGroup(BlockTags.create(new ResourceLocation("chisel", "sandstone")))
            .setGroupName("")
            .applyTag(BlockTags.MINEABLE_WITH_PICKAXE)
            .applyTag(Tags.Blocks.SANDSTONE)
            .initialProperties(() -> Blocks.SANDSTONE)
            .color(MaterialColor.COLOR_YELLOW)
            .variations(VariantTemplates.SCRIBBLES)
            .build();

    public static final TagKey<Block> TEMPLE1 = BlockTags.create(new ResourceLocation(Reference.MOD_ID, "temple"));

    public static final Map<String, BlockEntry<BlockCarvable>> TEMPLE = _FACTORY.newType(Material.STONE, "temple")
            .setGroup(TEMPLE1)
            .applyTag(BlockTags.MINEABLE_WITH_PICKAXE)
            .applyTag(BlockTags.NEEDS_STONE_TOOL)
            .recipe((prov, block) -> new ShapedRecipeBuilder(block, 32)
                    .pattern("SSS").pattern("SXS").pattern("SSS")
                    .define('S', Tags.Items.STONE)
                    .define('X', Tags.Items.DYES_CYAN)
                    .unlockedBy("has_dye", prov.has(Tags.Items.DYES_CYAN))
                    .save(prov))
            .variation("cobble") //TODO fix ctm and model
            .model(ModelTemplates.cubeEldritch())
            .next("ornate")
            .model(ModelTemplates.cubeEldritch())
            .next("plate")
            .model(ModelTemplates.cubeEldritch())
            .next("plate_cracked").localizedName("Cracked Plate") //TODO fix ctm and model
            .model(ModelTemplates.cubeEldritch())
            .next("bricks") //.localizedName("Small Bricks") TODO fix name conflict
            .model(ModelTemplates.cubeEldritch())
            .next("large_bricks")
            .model(ModelTemplates.cubeEldritch())
            .next("weared_bricks").localizedName("Damaged Bricks")
            .model(ModelTemplates.cubeEldritch())
            .next("disarray_bricks").localizedName("Trodden Bricks")
            .model(ModelTemplates.cubeEldritch())
            .next("column")
            .model(ModelTemplates.columnEldritch("temple"))
            .next("stand")
            .model(ModelTemplates.columnEldritch("temple"))
            .next("tiles") //.localizedName("Medium Tiles") TODO name conflict
            .model(ModelTemplates.cubeEldritch())
            .next("smalltiles").localizedName("Small Tiles")
            .model(ModelTemplates.cubeEldritch())
            .next("tiles_light").localizedName("Light Medium Tiles")
            .model(ModelTemplates.cubeEldritch())
            .next("smalltiles_light").localizedName("Light Small Tiles")
            .model(ModelTemplates.cubeEldritch())
            .next("stand_creeper").localizedName("Creeper Stand")
            .model(ModelTemplates.columnEldritch("temple"))
            .next("stand_mosaic").localizedName("Mosaic Stand")
            .model(ModelTemplates.columnEldritch("temple"))
            .build(b -> b.strength(1.5F).explosionResistance(10.0F).sound(SoundType.STONE));

    public static final Map<String, BlockEntry<BlockCarvable>> TEMPLE_MOSSY = _FACTORY.newType(Material.STONE, "templemossy")
            .setGroup(TEMPLE1)
            .setGroupName("")
            .applyTag(BlockTags.MINEABLE_WITH_PICKAXE)
            .applyTag(BlockTags.NEEDS_STONE_TOOL)
            .variation("cobble") //TODO fix ctm and model
            .model(ModelTemplates.cubeEldritch())
            .next("ornate")
            .model(ModelTemplates.cubeEldritch())
            .next("plate")
            .model(ModelTemplates.cubeEldritch())
            .next("plate_cracked").localizedName("Cracked Plate") //TODO fix ctm and model
            .model(ModelTemplates.cubeEldritch())
            .next("bricks") //.localizedName("Small Bricks") TODO name conflict
            .model(ModelTemplates.cubeEldritch())
            .next("large_bricks")
            .model(ModelTemplates.cubeEldritch())
            .next("weared_bricks").localizedName("Damaged Bricks")
            .model(ModelTemplates.cubeEldritch())
            .next("disarray_bricks").localizedName("Trodden Bricks")
            .model(ModelTemplates.cubeEldritch())
            .next("column")
            .model(ModelTemplates.columnEldritch("temple"))
            .next("stand")
            .model(ModelTemplates.columnEldritch("temple"))
            .next("tiles") //.localizedName("Medium Tiles") TODO name conflict
            .model(ModelTemplates.cubeEldritch())
            .next("smalltiles").localizedName("Small Tiles")
            .model(ModelTemplates.cubeEldritch())
            .next("tiles_light").localizedName("Light Medium Tiles")
            .model(ModelTemplates.cubeEldritch())
            .next("smalltiles_light").localizedName("Light Small Tiles")
            .model(ModelTemplates.cubeEldritch())
            .next("stand_creeper").localizedName("Creeper Stand")
            .model(ModelTemplates.columnEldritch("temple"))
            .next("stand_mosaic").localizedName("Mosaic Stand")
            .model(ModelTemplates.columnEldritch("temple"))
            .build(b -> b.strength(1.5F).explosionResistance(10.0F).sound(SoundType.STONE));

    public static final Map<String, BlockEntry<BlockCarvable>> TYRIAN = _FACTORY.newType(Material.METAL, "tyrian")
            .applyTag(BlockTags.MINEABLE_WITH_PICKAXE)
            .applyTag(BlockTags.NEEDS_STONE_TOOL)
            .initialProperties(() -> Blocks.IRON_BLOCK)
            .color(MaterialColor.TERRACOTTA_CYAN)
            .variation("shining").localizedName("Disordered Metal Bits")
            .recipe((prov, block) -> new ShapedRecipeBuilder(block, 32)
                    .pattern("SSS").pattern("SXS").pattern("SSS")
                    .define('S', Tags.Items.STONE)
                    .define('X', Tags.Items.INGOTS_IRON)
                    .unlockedBy("has_iron", prov.has(Tags.Items.INGOTS_IRON))
                    .save(prov))
            .next("tyrian").localizedName("Metal Plates")
            .next("chaotic").localizedName("Disordered Purple Bits")
            .next("softplate").localizedName("Purple Plates")
            .next("rust")
            .next("elaborate").localizedName("Shiny Plates")
            .next("routes")
            .next("platform")
            .next("platetiles").localizedName("Small Uneven Tiles\n")
            .next("diagonal").localizedName("Diagonal Plates")
            .next("dent")
            .next("blueplating").localizedName("Blue Plates")
            .next("black").localizedName("Black Scaled Plates")
            .next("black2").localizedName("Black Strips")
            .next("opening")
            .next("plate").localizedName("Shiny Plate") // FIXME temporary texture
            .build();

	public static void init() {}
}
